import React from 'react';
import { View, Text, StyleSheet, Alert, TouchableOpacity, Linking, Switch } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useTheme } from '../ThemeContext';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { RootStackParamList } from '../types';  // Import ki·ªÉu

// X√°c ƒë·ªãnh ki·ªÉu cho navigation
type SettingsScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Settings'>;

export default function SettingsScreen() {
  const { theme, toggleTheme } = useTheme();
  const navigation = useNavigation<SettingsScreenNavigationProp>();  // √Åp d·ª•ng ki·ªÉu

  const handleClearNotes = () => {
    Alert.alert(
      'Xo√° t·∫•t c·∫£ ghi ch√∫',
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° to√†n b·ªô ghi ch√∫?',
      [
        { text: 'Hu·ª∑', style: 'cancel' },
        {
          text: 'Xo√°',
          style: 'destructive',
          onPress: async () => {
            await AsyncStorage.removeItem('NOTES');
            Alert.alert('‚úÖ ƒê√£ xo√° to√†n b·ªô ghi ch√∫');
          },
        },
      ]
    );
  };

  const handleGoToArchive = () => {
    navigation.navigate('Archive');  // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh Archive
  };

  return (
    <View style={[styles.container, { backgroundColor: theme === 'light' ? '#fff' : '#121212' }]}>
      <Text style={[styles.header, { color: theme === 'light' ? '#000' : '#fff' }]}>‚öôÔ∏è C√†i ƒë·∫∑t</Text>

      <TouchableOpacity
        style={[styles.item, { backgroundColor: theme === 'light' ? '#f3f3f3' : '#333' }]}
        onPress={handleClearNotes}
      >
        <Text style={[styles.itemText, { color: theme === 'light' ? '#000' : '#fff' }]}>üóëÔ∏è Xo√° t·∫•t c·∫£ ghi ch√∫</Text>
      </TouchableOpacity>

      <TouchableOpacity
        style={[styles.item, { backgroundColor: theme === 'light' ? '#f3f3f3' : '#333' }]}
        onPress={() => Linking.openURL('mailto:youremail@example.com')}
      >
        <Text style={[styles.itemText, { color: theme === 'light' ? '#000' : '#fff' }]}>üìß G·ª≠i g√≥p √Ω</Text>
      </TouchableOpacity>

      {/* N√∫t Archive */}
      <TouchableOpacity
        style={[styles.item, { backgroundColor: theme === 'light' ? '#f3f3f3' : '#333' }]}
        onPress={handleGoToArchive}
      >
        <Text style={[styles.itemText, { color: theme === 'light' ? '#000' : '#fff' }]}>üì¶ Xem ghi ch√∫ ƒë√£ l∆∞u tr·ªØ</Text>
      </TouchableOpacity>

      <View style={styles.themeSwitchContainer}>
        <Text style={[styles.switchLabel, { color: theme === 'light' ? '#000' : '#fff' }]}>Ch·∫ø ƒë·ªô Dark/Light</Text>
        <Switch
          value={theme === 'dark'}
          onValueChange={toggleTheme}
        />
      </View>

      <View style={styles.infoBox}>
        <Text style={[styles.infoText, { color: theme === 'light' ? '#000' : '#fff' }]}>Phi√™n b·∫£n: 1.0.0</Text>
        <Text style={[styles.infoText, { color: theme === 'light' ? '#000' : '#fff' }]}>T√°c gi·∫£: B·∫°n</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  header: { fontSize: 22, fontWeight: 'bold', marginBottom: 20 },
  item: {
    padding: 14,
    borderRadius: 8,
    marginBottom: 12,
  },
  itemText: { fontSize: 16 },
  themeSwitchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  switchLabel: {
    fontSize: 16,
  },
  infoBox: { marginTop: 40 },
  infoText: { fontSize: 14, marginBottom: 4 },
});

import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Image, Alert, TextInput, TouchableOpacity } from 'react-native';
import RNFS from 'react-native-fs'; // Th∆∞ vi·ªán react-native-fs
import { useTheme } from '../ThemeContext';

type Note = {
  title: string;
  content: string;
  imageUri?: string;
  createdAt: string;
  password?: string; // C√≥ th·ªÉ c√≥ tr∆∞·ªùng m·∫≠t kh·∫©u ƒë·ªÉ kh√≥a ghi ch√∫
};

type DetailNoteScreenProps = {
  route: {
    params: {
      note: Note;
      index: number;
    };
  };
};

const NOTES_FILE_PATH = RNFS.DocumentDirectoryPath + '/notes.json'; // ƒê∆∞·ªùng d·∫´n t·ªõi t·ªáp ghi ch√∫

export default function DetailNoteScreen({ route }: DetailNoteScreenProps) {
  const { note, index } = route.params; // Nh·∫≠n note v√† index t·ª´ route
  const [updatedNote, setUpdatedNote] = useState<Note | null>(null); // State ƒë·ªÉ l∆∞u ghi ch√∫ ƒë√£ t·∫£i
  const [password, setPassword] = useState(''); // State ƒë·ªÉ l∆∞u m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p
  const [isLocked, setIsLocked] = useState(false); // Ki·ªÉm tra xem ghi ch√∫ c√≥ b·ªã kh√≥a kh√¥ng
  const { theme } = useTheme(); // D√πng theme t·ª´ context
  const themedStyles = getThemedStyles(theme); // L·∫•y c√°c style theo theme

  useEffect(() => {
    const fetchNote = async () => {
      try {
        const fileExists = await RNFS.exists(NOTES_FILE_PATH); // Ki·ªÉm tra xem t·ªáp ghi ch√∫ c√≥ t·ªìn t·∫°i kh√¥ng
        if (fileExists) {
          const fileContent = await RNFS.readFile(NOTES_FILE_PATH); // ƒê·ªçc t·ªáp ghi ch√∫
          const notes = JSON.parse(fileContent); // Parse d·ªØ li·ªáu JSON
          const updated = notes[index]; // T√¨m ghi ch√∫ theo index
          if (updated) {
            setUpdatedNote(updated); // N·∫øu t√¨m th·∫•y, l∆∞u v√†o state
            if (updated.password) {
              setIsLocked(true); // N·∫øu c√≥ m·∫≠t kh·∫©u, ghi ch√∫ b·ªã kh√≥a
            }
          } else {
            setUpdatedNote(note); // N·∫øu kh√¥ng t√¨m th·∫•y, d√πng ghi ch√∫ t·ª´ props
          }
        } else {
          setUpdatedNote(note); // N·∫øu t·ªáp kh√¥ng t·ªìn t·∫°i, d√πng ghi ch√∫ t·ª´ props
        }
      } catch (error) {
        console.error('L·ªói khi ƒë·ªçc t·ªáp ghi ch√∫:', error);
        Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i ghi ch√∫.');
      }
    };

    fetchNote(); // G·ªçi h√†m ƒë·ªÉ t·∫£i l·∫°i ghi ch√∫
  }, [index, note]); // M·ªói khi `index` ho·∫∑c `note` thay ƒë·ªïi, ch·∫°y l·∫°i useEffect

  const handleUnlock = () => {
    if (updatedNote && updatedNote.password && password === updatedNote.password) {
      setIsLocked(false); // N·∫øu m·∫≠t kh·∫©u ƒë√∫ng, m·ªü kh√≥a ghi ch√∫
    } else {
      Alert.alert('Sai m·∫≠t kh·∫©u', 'M·∫≠t kh·∫©u b·∫°n nh·∫≠p kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // N·∫øu ch∆∞a t·∫£i ƒë∆∞·ª£c ghi ch√∫ (state updatedNote l√† null), hi·ªÉn th·ªã loading
  if (!updatedNote) {
    return (
      <View style={themedStyles.container}>
        <Text style={themedStyles.title}>ƒêang t·∫£i...</Text>
      </View>
    );
  }

  return (
    <View style={themedStyles.container}>
      {isLocked ? (
        <View style={themedStyles.unlockContainer}>
          <Text style={themedStyles.title}>üîí Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ m·ªü kh√≥a ghi ch√∫</Text>
          <TextInput
            style={themedStyles.input}
            placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
            secureTextEntry
            value={password}
            onChangeText={setPassword}
            placeholderTextColor="#aaa"
          />
          <TouchableOpacity style={themedStyles.button} onPress={handleUnlock}>
            <Text style={themedStyles.buttonText}>M·ªü kh√≥a</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <View>
          {/* Hi·ªÉn th·ªã ·∫£nh n·∫øu c√≥ */}
          {updatedNote.imageUri && (
            <Image source={{ uri: updatedNote.imageUri }} style={themedStyles.image} resizeMode="cover" />
          )}

          {/* Hi·ªÉn th·ªã ti√™u ƒë·ªÅ */}
          <Text style={themedStyles.title}>{updatedNote.title}</Text>

          {/* Hi·ªÉn th·ªã ng√†y t·∫°o n·∫øu c√≥, n·∫øu kh√¥ng c√≥ th√¨ hi·ªÉn th·ªã 'Kh√¥ng c√≥ ng√†y' */}
          <Text style={themedStyles.dateText}>
            {updatedNote.createdAt ? new Date(updatedNote.createdAt).toLocaleString() : 'Kh√¥ng c√≥ ng√†y'}
          </Text>

          {/* Hi·ªÉn th·ªã n·ªôi dung */}
          <Text style={themedStyles.content}>{updatedNote.content}</Text>
        </View>
      )}
    </View>
  );
}

// Style theo theme (s√°ng/t·ªëi)
const getThemedStyles = (theme: 'light' | 'dark') =>
  StyleSheet.create({
    container: {
      flex: 1,
      padding: 20,
      backgroundColor: theme === 'light' ? '#EEE8AA' : '#121212',
    },
    title: {
      textAlign: 'center',
      fontSize: 24,
      fontWeight: 'bold',
      marginBottom: 10,
      color: theme === 'light' ? '#000' : '#fff',
    },
    dateText: {
      fontSize: 14,
      color: '#999',
      marginBottom: 15,
      textAlign: 'center',
    },
    content: {
      fontSize: 16,
      lineHeight: 24,
      color: theme === 'light' ? '#333' : '#ccc',
    },
    image: {
      width: '85%',
      height: 300,
      borderRadius: 8,
      marginBottom: 15,
      alignSelf: 'center',
    },
    unlockContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      padding: 20,
    },
    input: {
      borderWidth: 1,
      borderColor: '#aaa',
      padding: 12,
      borderRadius: 8,
      marginBottom: 15,
      backgroundColor: '#fff',
      fontSize: 16,
      color: '#333',
    },
    button: {
      backgroundColor: '#28a745',
      paddingVertical: 12,
      borderRadius: 8,
      alignItems: 'center',
    },
    buttonText: {
      color: '#fff',
      fontWeight: 'bold',
      fontSize: 16,
    },
  });
